using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Simple_Testing_Framework
{
    public class HTMLGenerator : IVisitor
    {
        StringBuilder code,line;
        public HTMLGenerator()
        {
            //the entire code generated until now
            code = new StringBuilder();
            //used to wrap the code of a single table line between <tr> </tr>
            line = new StringBuilder();
        }

        public String getHTML()
        {
            return code.ToString();
        }
        /// <summary>
        /// Visitor Pattern Method. Insert the table tags and the table name
        /// </summary>
        /// <param name="table">the table to be visited</param>
        public void visit (Table table)
        {
            code.Insert(0,"<table>"+Environment.NewLine+"<tr><td>"+table.name+"</td></tr>"+Environment.NewLine);
            code.AppendLine("</table>");
        }
        /// <summary>
        /// Wrap the html code contained in "line" with row tags, then reset the code of the line
        /// </summary>
        /// <param name="row">the row to be visited</param>
        public void visit (Row row)
        {
            //line contains the code generated by each cell (since they are all already visited)
            code.AppendLine("<tr>"+line.ToString()+"</tr>");
            line.Clear();
        }
        /// <summary>
        /// if the cell is colored, then generates the HTML attribute of the relative color
        /// then wrap the cell value inside cell tags
        /// </summary>
        /// <param name="cell">the cell to be visited</param>
        public void visit (Cell cell)
        {
            line.Append("<td");
            if(cell.color.Equals(Colors.GREEN))
                line.Append(" bgcolor=#00FF00 ");
            else if(cell.color.Equals(Colors.RED))
                line.Append(" bgcolor=#FF0000 ");
            line.AppendLine("> "+cell.value+" </td>");
        }
    }
}
